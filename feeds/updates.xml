<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
   <channel>
      <title>rvv-bench - Updates</title>
      <link>https://camel-cdr.github.io/rvv-bench-results/index.html</link>
      <description>A collection of RISC-V Vector (RVV) benchmarks to help developers write performance portable RVV code. I'll try to keep this up to date with major changes, like new benchmarks or processors. Article updates are posted to the separate feed.</description>
      <language>en-us</language>
      <docs>https://www.rssboard.org/rss-specification</docs>
      <generator>neovim</generator>
      <atom:link href="https://camel-cdr.github.io/rvv-bench-results/feeds/updates.xml" rel="self" type="application/rss+xml" />

      <item>
         <title>rvv-bench now has RSS feeds!</title>
         <guid>https://camel-cdr.github.io/rvv-bench-results/index.html#rss-update-1</guid>
         <description><![CDATA[<p>rvv-bench now has RSS feeds: <a href="https://camel-cdr.github.io/rvv-bench-results/feeds/articles.xml">articles</a> and <a href="https://camel-cdr.github.io/rvv-bench-results/feeds/updates.xml">updates</a></p><p>I'll try to keep the "<a href="https://camel-cdr.github.io/rvv-bench-results/feeds/updates.xml">updates</a>" feed, this one, up to date with major changes, like new benchmarks or processors. Article updates are posted to the separate "<a href="https://camel-cdr.github.io/rvv-bench-results/feeds/updates.xml">updates</a>" feed.</p>]]></description>
         <pubDate>Thu, 05 Dec 2024 19:00 GMT</pubDate>
      </item>

      <item>
         <title>XiangShanV3, AndeSim and base64_encode</title>
         <guid>https://camel-cdr.github.io/rvv-bench-results/index.html#rss-update-2</guid>
         <description><![CDATA[<p>It's been a while and I thought I should probably give an update.</p><h2>XiangShanV3 (Kuminghu)</h2><p>The <a href="https://github.com/OpenXiangShan/XiangShan">XiangShan</a> processor project has currently the fastest open-source CPU design, and their latest iteration, XiangShanV3 (Kuminghu) adds RVV 1.0 support.<br>I've been simulating the XiangShanV3 RTL for a while now, however decided not to link to them from the main page yet, because the core is in ongoing development and the development team's focus was still on correctness over performance.<br>With significant performance problems still persisting, companies like <a href="https://www-spacemit-com.translate.goog/news/%E8%BF%9B%E8%BF%AD%E6%97%B6%E7%A9%BA%E7%AC%AC%E4%B8%89%E4%BB%A3%E9%AB%98%E6%80%A7%E8%83%BD%E6%A0%B8x200%E7%A0%94%E5%8F%91%E8%BF%9B%E5%B1%95/?_x_tr_sl=auto&_x_tr_tl=en&_x_tr_hl=en-US&_x_tr_pto=wapp">SpacemiT</a> building on top of the codebase and the <a href="https://riscv-europe.org/summit/2025/">RISC-V Summit Europe</a> coming up (I'll attend), I decided to rerun all the benchmarks and add it to the main page.<br>The scalar part of the core already performs amazingly, and there are just a handful  of problems to iron out to get the RVV support to a  well performant state.</p><h2>AndeSim of Andes AX45MPV</h2><p>Andes recently held a <a href="https://community.riscv.org/events/details/risc-v-international-risc-v-academy-presents-risc-v-hackathon-online/">Hackathon</a> where they provided a participant with their AndeSim near-cycle-accurate core simulator for their AX45MPV core.They graciously allowed me to share the benchmark results from this tool, and while it doesn't match the real hardware performance 1-to-1, it should give some insight into what to expect from their implementation.<br>I've placed this into a new category for performance models, and I'm planning to add a GEM5 configuration to that as well, but the last time I tried it still crashed when running the benchmarks.</p><h2>base64 encode</h2><p>Finally, I've added a new benchmark for different base64 decode implementations.This was motivated by <a href="https://github.com/simdutf/simdutf/pull/716">the simdutf base64 support</a> for which it wasn't clear which implementation strategy performs best across actual hardware.<br>Using segmented-load/stores simplifies the data rearrangement by a lot, but it's unclear how these instructions will perform on current and future hardware.The other question was whether it's better to use 4 LMUL=1 vrgathers + 4 simple LMUL=4 instructions vs a single LMUL=4 vrgather, two LMUL=2 vrgathers, or four LMUL=1 vrgathers, for VLEN=128, VLEN=256 and VLEN>=512 respectively.</p>]]></description>
         <pubDate>Sun, 05 May 2025 07:30 GMT</pubDate>
      </item>

      <item>
         <title>SiFive X280</title>
         <guid>https://camel-cdr.github.io/rvv-bench-results/index.html#rss-update-3</guid>
         <description><![CDATA[<p>We finally have new measurements from actual hardware: <a href="https://camel-cdr.github.io/rvv-bench-results/tt_x280/index.html">SiFive X280</a></p><p><a href="https://github.com/Civil">Civil</a> was so nice to run the benchmarks on the SiFive X280 cores present on the <a href="https://tenstorrent.com/hardware/blackhole">Tenstorrent Blackhole</a> AI accelerator card.<br>Apparently the smaller "Baby RISC-V" cores in the Blackhole card now also support a subset of RVV, previous generations had a custom SIMD ISA. We'll see if we can figure out how to measure the performance of those as well.</p>]]></description>
         <pubDate>Fri, 06 Jun 2025 10:30 GMT</pubDate>
      </item>


      <item>
         <title>New benchmark inspired by IDCT: 8x8 matrix transpose</title>
         <guid>https://camel-cdr.github.io/rvv-bench-results/index.html#rss-update-4</guid>
         <description><![CDATA[<p>I've added two new benchmark for 8x8 matrix transposes (<a href="https://camel-cdr.github.io/rvv-bench-results/bpi_f3/trans8x8e8.html">trans8x8e8</a>,<a href="https://camel-cdr.github.io/rvv-bench-results/bpi_f3/trans8x8e16.html">trans8x8e16</a>), which are meant to mimic the properties of DCT/IDCT kernels, which are common in video processing.</p>]]></description>
         <pubDate>Mon, 07 Jul 2025 22:00 GMT</pubDate>
      </item>

   </channel>
</rss>
